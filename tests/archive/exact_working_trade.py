#!/usr/bin/env python3
"""
Test with EXACT parameters from working BaseScan trade
"""

import asyncio
import os
import sys

# Add src to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "src"))

# Set environment variables
os.environ.update(
    {
        "TELEGRAM_BOT_TOKEN": "test_token",
        "DATABASE_URL": "sqlite+aiosqlite:///test.db",
        "BASE_RPC_URL": "https://mainnet.base.org",
        "BASE_CHAIN_ID": "8453",
        "ENCRYPTION_KEY": "vkpZGJ3stdTs-i-gAM4sQGC7V5wi-pPkTDqyglD5x50=",
        "ADMIN_USER_IDS": "123456789",
        "COPY_EXECUTION_MODE": "LIVE",
        "PYTH_PRICE_SERVICE_URL": "https://hermes.pyth.network",
        "CHAINLINK_BASE_URL": "https://api.chain.link/v1",
        "TRADER_PRIVATE_KEY": "aa3645b7606503e1a3e6081afe67eeb91662d143879f26ac77aedfcc043b1f87",
        "AVANTIS_TRADING_CONTRACT": "0x5FF292d70bA9cD9e7CCb313782811b3D7120535f",
    }
)


async def test_exact_working_trade():
    print("üéØ TESTING WITH EXACT WORKING TRADE PARAMETERS")
    print("=" * 60)
    print("‚ö†Ô∏è  Using EXACT values from successful BaseScan trade")
    print(
        "   Working trade: 0xfb8ae4e783b4d0b0a02f2afcd670f6719b5c56f7a9d20e482e1399f16c64917c"
    )
    print("=" * 60)

    try:
        # Import required modules
        from avantis_trader_sdk import TraderClient
        from avantis_trader_sdk.types import TradeInput, TradeInputOrderType

        # Initialize TraderClient
        trader = TraderClient(provider_url="https://mainnet.base.org")
        trader.set_local_signer(
            private_key="aa3645b7606503e1a3e6081afe67eeb91662d143879f26ac77aedfcc043b1f87"
        )
        address = trader.get_signer().get_ethereum_address()

        print("‚úÖ TraderClient initialized")
        print(f"‚úÖ Trader address: {address}")

        # EXACT working trade parameters (from BaseScan)
        print("\nüìä EXACT WORKING TRADE PARAMETERS:")
        print(
            "   Transaction: 0xfb8ae4e783b4d0b0a02f2afcd670f6719b5c56f7a9d20e482e1399f16c64917c"
        )
        print("   Pair Index: 0 (ETH/USD)")
        print("   Leveraged Position Size: 167,602,500")
        print("   Value Long: 984,771,788")
        print("   Value Short: 893,899,680")
        print("   Price: 25,408,948,094,745")

        # Try with EXACT values from working trade
        print("\nüîç TESTING WITH EXACT VALUES:")

        # The working trade shows leveraged position size of 167,602,500
        # This is likely the position size in micro-units
        # Let me try with this exact value
        try:
            trade_input = TradeInput(
                pairIndex=0,  # ETH/USD (same as working trade)
                buy=True,  # Long position
                initialPosToken=167602500,  # EXACT leveraged position size from working trade
                leverage=10,  # 10x leverage
                tp=0,  # No take profit
                sl=0,  # No stop loss
                trader=address,
            )

            print("   ‚úÖ TradeInput created with EXACT working parameters:")
            print(f"   pairIndex: {trade_input.pairIndex}")
            print(f"   buy: {trade_input.buy}")
            print(f"   initialPosToken: {trade_input.initialPosToken}")
            print(f"   leverage: {trade_input.leverage}")
            print(f"   tp: {trade_input.tp}")
            print(f"   sl: {trade_input.sl}")
            print(f"   trader: {trade_input.trader}")

            # Build transaction
            trade_tx = await trader.trade.build_trade_open_tx(
                trade_input=trade_input,
                trade_input_order_type=TradeInputOrderType.MARKET,
                slippage_percentage=1000,  # 10% slippage (matching working trade)
            )

            print("   ‚úÖ Transaction built successfully!")
            print(f"   üìù Transaction: {trade_tx}")

            # Try to execute
            print("\nüîÑ Executing trade with EXACT working parameters...")
            tx_hash = await trader.send_and_get_transaction_hash(trade_tx)
            print("   ‚úÖ Trade executed successfully!")
            print(f"   üìù Transaction Hash: {tx_hash}")
            print(f"   üîó View on BaseScan: https://basescan.org/tx/{tx_hash}")

            print("\nüéâ SUCCESS! Bot now works with EXACT working parameters!")
            print("‚úÖ Avantis protocol integration working")
            print("‚úÖ Real trade executed on Base mainnet")
            print("‚úÖ Transaction confirmed on blockchain")
            print("‚úÖ PRODUCTION READY!")

            return True

        except Exception as trade_error:
            print(f"   ‚ùå Trade execution failed: {trade_error}")

            # Try with even higher values to match working trade
            print("\nüîÑ Trying with higher values to match working trade...")
            try:
                # Try with the value long from working trade
                trade_input_high = TradeInput(
                    pairIndex=0,  # ETH/USD
                    buy=True,  # Long position
                    initialPosToken=984771788,  # Value Long from working trade
                    leverage=10,  # 10x leverage
                    tp=0,  # No take profit
                    sl=0,  # No stop loss
                    trader=address,
                )

                print("   ‚úÖ TradeInput created with Value Long: 984,771,788")

                trade_tx_high = await trader.trade.build_trade_open_tx(
                    trade_input=trade_input_high,
                    trade_input_order_type=TradeInputOrderType.MARKET,
                    slippage_percentage=1000,  # 10% slippage
                )

                print("   ‚úÖ Value Long transaction built successfully!")

                tx_hash_high = await trader.send_and_get_transaction_hash(trade_tx_high)
                print("   ‚úÖ Value Long trade executed successfully!")
                print(f"   üìù Transaction Hash: {tx_hash_high}")
                print(f"   üîó View on BaseScan: https://basescan.org/tx/{tx_hash_high}")

                return True

            except Exception as high_error:
                print(f"   ‚ùå Value Long trade also failed: {high_error}")
                print("   ‚Üí Still need to find exact parameter format")

            import traceback

            traceback.print_exc()
            return False

    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        import traceback

        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = asyncio.run(test_exact_working_trade())
    if success:
        print("\nüéâ EXACT WORKING TRADE SUCCESS!")
        print("‚úÖ Bot now works with EXACT working parameters!")
        print("‚úÖ PRODUCTION READY!")
    else:
        print("\nüí• EXACT WORKING TRADE FAILED")
        print("‚ùå Still need to find exact parameter format")
        print("‚ùå Check the output above for specific error details")
        sys.exit(1)
